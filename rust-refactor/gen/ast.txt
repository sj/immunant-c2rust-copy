// This file describes nearly all Rust AST types.  It is used by gen/process_ast.py to generate
// impls of various traits for all AST nodes.
//
// There are three types of declarations that can appear in this file.
//  - `struct`s: Similar to Rust struct declarations, except that only field names are given, not
//    their types.  Both "normal" and tuple structs are supported.  In normal structs declarations,
//    the field names must match the actual names of the fields.  For tuple structs, names must
//    still be provided, but they can be chosen arbitrarily (except they must be valid Rust
//    identifiers, i.e., not keywords).
//  - `enum`s: Similar to Rust enum declarations.  Each variant follows the same format as a struct
//    declaration.  Both tuple-like and struct-like variants are supported.
//  - `flag`s: These indicate types with no interesting internal structure, such as `Mutability` (an
//    enum with two nullary variants, `Mutable` and `Immutable`).  The code generators will either
//    ignore these or use a simple default implementation.
//
// Top-level declarations, enum variants, and struct/variant fields may all be prefixed with
// attributes.  The attribute format is `#[attr]` or `#[key=value]` (where `value` is a single
// word).  Consult the doc comments for the code generator modules for information on the supported
// attributes and their effects.


struct Crate { module, attrs, span }
struct Mod { inner, items }


#[rewrite_splice] #[rewrite_seq_item] #[extend_span]
struct Item { ident, #[match=ignore] attrs, id, node, vis, span,
              #[match=ignore] #[rewrite=ignore] tokens }
enum ItemKind {
    ExternCrate(name),
    Use(vp),
    Static(ty, mutbl, init),
    Const(ty, init),
    Fn(decl, unsafety, constness, abi,
       generics, block),
    Mod(module),
    ForeignMod(fm),
    GlobalAsm(asm),
    Ty(ty, generics),
    Enum(def, generics),
    Struct(vd, generics),
    Union(vd, generics),
    Trait(is_auto, unsafety, generics, bounds, items),
    Impl(unsafety, polarity, generics, defaultness, trait_ref, ty, items),
    Mac(mac),
    MacroDef(tts),
    TraitAlias(generics,bounds),
}

enum UseTreeKind {
    Simple(ident, span1, span2),
    Glob,
    Nested(nested),
}

struct UseTree { kind, prefix, span }

#[extend_span]
struct TraitItem { id, ident, #[match=ignore] attrs, generics, node, span,
                   #[match=ignore] #[rewrite=ignore] tokens }
enum TraitItemKind {
    Const(ty, init),
    Method(sig, body),
    Type(bounds, ty),
    Macro(mac),
}

#[extend_span]
struct ImplItem { id, ident, vis, defaultness, #[match=ignore] attrs, generics, node, span,
                  #[match=ignore] #[rewrite=ignore] tokens }
enum ImplItemKind {
    Const(ty, init),
    Method(sig, body),
    Type(ty),
    Macro(mac),
}

struct TraitRef { path, ref_id }

struct EnumDef { variants }
struct Variant_ { ident, #[match=ignore] attrs, data, disr_expr }
enum VariantData {
    Struct(fields, id),
    Tuple(fields, id),
    Unit(id),
}

struct StructField { span, ident, vis, id, ty, #[match=ignore] attrs }

struct MethodSig { unsafety, constness, abi, decl }

struct ForeignMod { abi, items }
struct ForeignItem { ident, #[match=ignore] attrs, node, id, span, vis }
enum ForeignItemKind {
    Fn(decl, generics),
    Static(ty, mutbl),
    Ty,
    Macro(mac),
}


struct Generics { params, where_clause, span }
struct TyParam { attrs, ident, id, bounds, default }
struct LifetimeDef { attrs, lifetime, bounds }
struct WhereClause { id, predicates, span }
enum WherePredicate {
    BoundPredicate(pred),
    RegionPredicate(pred),
    EqPredicate(pred),
}
enum GenericParam {
    Lifetime(lifetime),
    Type(typaram),
}

struct WhereBoundPredicate { span, bounded_ty, bounds, bound_generic_params }
struct WhereRegionPredicate { span, lifetime, bounds }
struct WhereEqPredicate { id, span, lhs_ty, rhs_ty }
flag TraitBoundModifier;

#[match=ignore]
enum VisibilityKind {
    Public,
    Crate(crate_sugar),
    Restricted { path, id },
    Inherited,
}

flag CrateSugar;

#[match=custom] #[rewrite_splice]
struct Ty { id, node, span }
struct MutTy {ty, mutbl}
enum TyKind {
    Slice(ty),
    Array(ty, len),
    Ptr(mty),
    Rptr(lt, mty),
    BareFn(ty),
    Never,
    Tup(tys),
    Path(qself, path),
    TraitObject(bounds, trait_object_syntax),
    ImplTrait(bounds),
    Paren(ty),
    Typeof(expr),
    Infer,
    ImplicitSelf,
    Mac(mac),
    Err,
}

flag TraitObjectSyntax;


flag LitIntType;
flag FloatTy;

struct BareFnTy { unsafety, abi, decl, generic_params }
struct Lifetime { id, ident }
enum TyParamBound {
    TraitTyParamBound(poly, module),
    RegionTyParamBound(lt),
}

struct PolyTraitRef { trait_ref, span, bound_generic_params }

struct FnDecl { inputs, output, variadic }
struct Arg { ty, pat, id }
enum FunctionRetTy {
    Default(sp),
    Ty(ty),
}


struct TypeBinding { id, ident, ty, span }


#[match=custom] #[rewrite_splice] #[rewrite_seq_item]
struct Stmt { id, node, span }
#[no_debug]
enum StmtKind {
    Local(local),
    Item(item),
    Expr(expr),
    Semi(expr),
    Mac(mac),
}

struct Local { pat, ty, init, id, span, #[match=ignore] attrs }


#[match=custom] #[rewrite_splice] #[extend_span]
struct Expr { id, node, span, #[match=ignore] attrs }
#[prec_contains_expr]
enum ExprKind {
    Box(#[prec=PREFIX] expr),
    ObsoleteInPlace(expr1, expr2),
    Array(elems),
    Call(#[prec=POSTFIX] #[prec_special=Callee] func, args),
    MethodCall(path_seg, #[prec_first=POSTFIX] args),
    Tup(elems),
    Binary(op, #[prec_left_of_binop=op] a, #[prec_right_of_binop=op] b),
    Unary(op, #[prec=PREFIX] a),
    Lit(lit),
    Cast(#[prec=As] expr, ty),
    Type(#[prec=Colon] expr, ty),
    If(#[prec_special=Cond] cond, then_body, else_body),
    IfLet(pat, #[prec_special=Cond] expr, then_body, else_body),
    While(#[prec_special=Cond] cond, body, label),
    WhileLet(pat, #[prec_special=Cond] expr, body, label),
    ForLoop(pat, #[prec_special=Cond] iter, body, label),
    Loop(body, label),
    Match(#[prec_special=Cond] target, arms),
    Closure(cap, mov, decl, body, span),
    Block(body, label),
    Catch(body),
    Assign(#[lvalue_mut] #[prec_inc=Assign] lhs, #[prec=Assign] rhs),
    AssignOp(op, #[lvalue_mut] #[prec_inc=Assign] lhs, #[prec=Assign] rhs),
    Field(#[lr_propagate] #[prec=POSTFIX] expr, ident),
    Index(#[lr_propagate] #[prec=POSTFIX] arr, idx),
    // Special case for `Range`.  `AssocOp` claims that `Range` has higher precedence than
    // `Assign`, but `x .. x = x` gives a parse error instead of `x .. (x = x)`.  Here we use a
    // fake precedence value so that any child with lower precedence than a "normal" binop gets
    // parenthesized.  (`LOr` is the lowest-precedence binop.)
    Range(#[prec=LOr] lo, #[prec=LOr] hi, limits),
    Path(qself, path),
    AddrOf(mutbl, #[lvalue_kind=mutbl] #[prec=PREFIX] expr),
    Break(label, #[prec=JUMP] expr),
    Continue(label),
    Ret(#[prec=JUMP] expr),
    InlineAsm(asm),
    Mac(mac),
    Struct(path, fields, base),
    Repeat(item, count),
    Paren(expr),
    Try(#[prec=POSTFIX] expr),
    Yield(#[prec=JUMP] expr),
}

enum Movability {
    Static,
    Movable,
}

#[match=eq]
flag UnOp;
#[match=eq]
flag BinOpKind;
struct Field { ident, expr, span, is_shorthand, attrs }
struct Arm { attrs, pats, guard, body }
#[match=custom]
struct Block { stmts, id, rules, span, recovered }


#[match=custom]
struct Pat { id, node, span }
enum PatKind {
    Wild,
    Ident(mode, id, pat),
    Struct(path, fields, dotdot),
    TupleStruct(path, fields, dotdot),
    Path(qself, path),
    Tuple(pats, dotdot),
    Box(pat),
    Ref(pat, mutbl),
    Lit(expr),
    Range(lo, hi, end),
    Slice(start, mid, end),
    Paren(pat),
    Mac(mac),
}

struct FieldPat { ident, pat, is_shorthand, attrs }


enum LitKind {
    Str(sym, style),
    ByteStr(bytes),
    Byte(x),
    Char(x),
    Int(x, ty),
    Float(sym, ty),
    FloatUnsuffixed(sym),
    Bool(x),
}



flag Defaultness;
flag Constness;
flag ImplPolarity;
flag IsAuto;
flag Unsafety;
flag Abi;
flag Mutability;
flag RangeEnd;
flag BindingMode;
flag CaptureBy;
// Distinguish `{ ... }` from `unsafe { ... }`.
#[match=eq] flag BlockCheckMode;
flag StrStyle;
flag AsmDialect;
flag RangeLimits;


#[no_node_id]
struct Attribute { id, style, path, tokens, is_sugared_doc, span }
flag AttrStyle;


#[match=custom]
struct Path { span, segments }
struct PathSegment { ident, parameters }
enum PathParameters {
    AngleBracketed(abpd),
    Parenthesized(ppd),
}

struct AngleBracketedParameterData { span, lifetimes, types, bindings }
struct ParenthesizedParameterData { span, inputs, output }
struct QSelf { ty, path_span, position }


struct Mac_ { path, delim, tts }
flag MacStmtStyle;
flag TokenStream;
flag ThinTokenStream;
struct MacroDef { tokens, legacy }


struct InlineAsm {
asm, asm_str_style, outputs, inputs, clobbers,
volatile, alignstack, dialect, ctxt
}
struct GlobalAsm { asm, ctxt }
struct InlineAsmOutput { constraint, expr, is_rw, is_indirect }

struct Label { ident }

enum MacDelimiter {
    Parenthesis,
    Bracket,
    Brace,
}

struct AnonConst {
    id,
    value,
}

#[match=custom] flag Ident;
#[match=eq] flag Name;
#[match=eq] flag SyntaxContext;

#[equiv_mode=ignore] flag Span;
#[equiv_mode=ignore] flag NodeId;
#[equiv_mode=ignore] flag AttrId;

flag usize;
#[match=eq] flag bool;
#[match=eq] flag u128;
#[match=eq] flag u8;
#[match=eq] flag char;
